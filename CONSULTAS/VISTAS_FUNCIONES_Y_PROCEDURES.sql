USE WORLD;
USE SAKILA;

# ============================= CREAR VISTAS ============================= #

CREATE VIEW CIUDADES_PAIS AS
	SELECT
		CI.NAME AS CIUDAD,
		CO.NAME AS PAIS
	FROM CITY CI
	JOIN COUNTRY CO ON CI.COUNTRYCODE=CO.CODE;
    
    SELECT * FROM CIUDADES_PAIS;

# ============================= CREAR FUNCIONES ============================= #

CREATE FUNCTION HOLA_NOMBRE (NOMBRE CHAR(20))
RETURNS CHAR(50) DETERMINISTIC
RETURN CONCAT('HOLA ',NOMBRE,'!');

SELECT HOLA_NOMBRE("CANDY");

# ============================= EJERCICIOS ============================= #

# EJ1 - CREA UNA VISTA QUE MUESTRE EL ID DE LOS ACTORES, EL NOMBRE Y LOS APELLIDOS 
#       CONCATENADOS Y LA CANTIDAD DE PELÍCULAS QUE HA HECHO CADA ACTOR. ORDENADO 
#       DE MAYOR A MENOR NÚMERO DE PELÍCULAS

USE SAKILA;

CREATE OR REPLACE VIEW PELICULAS_POR_ACTOR AS
SELECT
	A.ACTOR_ID,
    CONCAT(A.FIRST_NAME, " ", A.LAST_NAME) AS ACTOR,
    COUNT(*) AS PELICULAS
FROM ACTOR A
JOIN FILM_ACTOR FA ON A.ACTOR_ID=FA.ACTOR_ID
GROUP BY A.ACTOR_ID
ORDER BY PELICULAS DESC;

# PUEDO USAR LA VISTA COMO UNA TABLA (ES UNA TABLA VIRTUAL)
SELECT * FROM PELICULAS_POR_ACTOR WHERE PELICULAS>30;

# EJ2 - CREA UNA FUNCIÓN QUE RECIBA EL CÓDIGO DE UN PAÍS Y DEVUELVA EL NOMBRE DE SU CAPITAL

DROP FUNCTION IF EXISTS GET_CAPITAL;

CREATE FUNCTION GET_CAPITAL (CODIGO_PAIS CHAR(50))
RETURNS CHAR(50) DETERMINISTIC
RETURN (SELECT 
			CITY.NAME
		FROM CITY 
		JOIN COUNTRY ON CITY.ID=COUNTRY.CAPITAL
		WHERE COUNTRY.CODE=CODIGO_PAIS);

# EJEMPLO DE USO DE LA FUNCIÓN
SELECT GET_CAPITAL("JPN");

# OTRO EJEMPLO DE USO DE LA FUNCIÓN
SELECT 
	NAME, 
    GET_CAPITAL(CODE) AS CAPITAL
FROM COUNTRY;

# EJ3 - ESCRIBE UNA FUNCIÓN QUE DEVUELVA COMO SALIDA EL NÚMERO DE AÑOS QUE HAN TRANSCURRIDO 
#       ENTRE DOS FECHAS QUE SE RECIBEN COMO PARÁMETROS DE ENTRADA.

CREATE FUNCTION YEARDIFF (FECHA1 DATE, FECHA2 DATE)
RETURNS INT DETERMINISTIC
RETURN FLOOR( ABS(DATEDIFF(FECHA1, FECHA2)/365) );

SELECT YEARDIFF("2037-01-01", "2030-05-06");

# EJ4 - ESCRIBE UNA FUNCIÓN QUE RECIBA EL NOMBRE DE UN CONTINENTE Y DEVUELVA LA POBLACIÓN 
#       DEL CONTINENTE.
#       USA ESTA FUNCIÓN PARA CREAR UNA VISTA QUE MUESTRE UNA LISTA DE LOS PAÍSES Y EL 
#       PORCENTAJE DE POBLACIÓN QUE REPRESENTA CADA PAÍS EN SU CONTINENTE.

CREATE FUNCTION CONTINENT_POPULATION (CONTINENTE VARCHAR(50))
RETURNS BIGINT DETERMINISTIC
RETURN (SELECT SUM(POPULATION) FROM COUNTRY WHERE CONTINENT=CONTINENTE);

SELECT CONTINENT_POPULATION("EUROPE");

CREATE OR REPLACE VIEW POBLACION_PAISES_SOBRE_CONTINENTE AS
SELECT 
	NAME AS PAIS, 
	#POPULATION, 
    CONTINENT, 
    #CONTINENT_POPULATION(CONTINENT) AS CONTINENT_POPULATION,
    POPULATION/CONTINENT_POPULATION(CONTINENT)*100 AS PORCENTAJE_CONTINENTE
FROM COUNTRY;

SELECT * 
FROM POBLACION_PAISES_SOBRE_CONTINENTE 
WHERE CONTINENT="EUROPE"
ORDER BY PORCENTAJE_CONTINENTE DESC;


# EJ5 - ESCRIBE UNA FUNCIÓN QUE RECIBA EL RADIO DE UN CÍRCULO Y DEVUELVA SU ÁREA.

CREATE FUNCTION AREA_CIRCULO (RADIO FLOAT)
RETURNS FLOAT DETERMINISTIC
RETURN PI()*RADIO*RADIO;

SELECT AREA_CIRCULO(15.69);

# EJ6 - CREA UNA FUNCIÓN QUE RECIBA UN AÑO Y DEVUELVA EL SIGLO EN EL QUE ESTÁ.

CREATE FUNCTION GET_SIGLO (ANIO INT)
RETURNS INT DETERMINISTIC
RETURN FLOOR((ANIO-1)/100+1);

SELECT GET_SIGLO(2000);

# EJ7 - CREA UNA FUNCIÓN QUE RECIBA UN AÑO E INDIQUE SI ES BISIESTO O NO.
DROP FUNCTION ES_BISIESTO;

CREATE FUNCTION ES_BISIESTO (ANIO INT)
RETURNS BOOL DETERMINISTIC
RETURN ( ANIO%4=0 AND ANIO%100!=0 ) OR ANIO%400=0;

SELECT ES_BISIESTO(1200);

# EJ8 - USA LAS DOS FUNCIONES ANTERIORES PARA CREAR UNA VISTA QUE MUESTRE LOS NOMBRES DE 
#       LOS PAÍSES, SU AÑO DE INDEPENDENCIA, EL SIGLO EN QUE SE INDEPENDIZARON Y SI ESE 
#       AÑO ERA BISIESTO O NO. 
#       NO SE DEBEN MOSTRAR LOS PAÍSES CON AÑO DE INDEPENDENCIA A NULL.

CREATE VIEW INDEP_DATA AS
	SELECT 
		NAME,
		INDEPYEAR,
		GET_SIGLO(INDEPYEAR) AS INDEP_CENTURY,
		ES_BISIESTO(INDEPYEAR) LEAP_YEAR
	FROM COUNTRY
	WHERE INDEPYEAR IS NOT NULL;
    
    
SELECT * 
FROM INDEP_DATA
WHERE INDEP_CENTURY<20;